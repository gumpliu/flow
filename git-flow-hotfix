#!/bin/sh
init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  VERSION_PREFIX=$(eval "echo `git config --get gitflow.prefix.versiontag`")
  PREFIX=$(git config --get gitflow.prefix.hotfix)
}

usage() {
	echo "usage: flow hotfix [list] [-v]"
	echo "       flow hotfix start [-F] <version> [<base>]"
	echo "       flow hotfix finish [-m] <version>"
	echo "       flow hotfix push [version]"
	echo "       flow hotfix publish <version>"
	echo "       flow hotfix track <version>"
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	local hotfix_branches
	local current_branch
	local short_names
	hotfix_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	if [ -z "$hotfix_branches" ]; then
		warn "No hotfix branches exist."
                warn ""
                warn "You can start a new hotfix branch:"
                warn ""
                warn "    git flow hotfix start <version> [<base>]"
                warn ""
		exit 0
	fi
	current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
	short_names=$(echo "$hotfix_branches" | sed "s ^$PREFIX  g")

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	local branch
	for branch in $short_names; do
		local fullname=$PREFIX$branch
		local base=$(git merge-base "$fullname" "$MASTER_BRANCH")
		local master_sha=$(git rev-parse "$MASTER_BRANCH")
		local branch_sha=$(git rev-parse "$fullname")
		if [ "$fullname" = "$current_branch" ]; then
			printf "* "
		else
			printf "  "
		fi
		if flag verbose; then
			printf "%-${width}s" "$branch"
			if [ "$branch_sha" = "$master_sha" ]; then
				printf "(no commits yet)"
			else
				local tagname=$(git name-rev --tags --no-undefined --name-only "$base")
				local nicename
				if [ "$tagname" != "" ]; then
					nicename=$tagname
				else
					nicename=$(git rev-parse --short "$base")
				fi
				printf "(based on $nicename)"
			fi
		else
			printf "%s" "$branch"
		fi
		echo
	done
}

cmd_help() {
	usage
	exit 0
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	VERSION=$1
	BRANCH=$PREFIX$VERSION
}

require_version_arg() {
	if [ "$VERSION" = "" ]; then
		warn "Missing argument <version>"
		usage
		exit 1
	fi
}

require_base_is_on_master() {
	if ! git branch --no-color --contains "$BASE" 2>/dev/null \
			| sed 's/[* ] //g' \
	  		| grep -q "^$MASTER_BRANCH\$"; then
		die "fatal: Given base '$BASE' is not a valid commit on '$MASTER_BRANCH'."
	fi
}

require_no_existing_hotfix_branches() {
	local hotfix_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	local first_branch=$(echo ${hotfix_branches} | head -n1)
	first_branch=${first_branch#$PREFIX}
	[ -z "$hotfix_branches" ] || \
		die "There is an existing hotfix branch ($first_branch). Finish that one first."
}

cmd_start() {
	DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
	parse_args "$@"
	BASE=${2:-$MASTER_BRANCH}
	require_version_arg
	require_base_is_on_master
	require_no_existing_hotfix_branches

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$BRANCH"
	require_tag_absent "$VERSION_PREFIX$VERSION"
	if flag fetch; then
		git_do fetch -q "$ORIGIN" "$MASTER_BRANCH"
	fi
	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi

	# create branch
	git_do checkout -b "$BRANCH" "$BASE"

	echo
	echo "Summary of actions:"
	echo "- A new branch '$BRANCH' was created, based on '$BASE'"
	echo "- You are now on branch '$BRANCH'"
	echo
	echo "Follow-up actions:"
	echo "- Bump the version number now!"
	echo "- Start committing your hot fixes"
	echo "- When done, run:"
	echo
	echo "     flow hotfix finish '$VERSION'"
	echo
}


cmd_publish() {
	parse_args "$@"
	require_version_arg

    require_in_current_branch

	# sanity checks
	require_clean_working_tree
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN"

    #make sure master branch is equals origin branch
	require_branches_absolutely_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH" || \
        die "falal: $master_branch isn't equal with $origin/$master_branch"

    #make sure local branch is equal origin branch
	require_branches_absolutely_equal "$BRANCH" "$ORIGIN/$BRANCH"
    local result=$?
    if [ $result -gt 0 ]; then
        if [ $result -eq 1 ]; then
            git_do merge $ORIGIN/$BRANCH
        else
            die "falal: $BRANCH isn't equal with $ORIGIN/$BRANCH"
        fi
    fi

    #check master branch has merge into branch
    if ! git_is_branch_merged_into "$MASTER_BRANCH" "$BRANCH"; then
        die "There were merge conflicts."
    fi

	local tagname=$VERSION_PREFIX$VERSION
    
    tagname="$(generate_tag_version "$tagname")"

	if ! git_tag_exists "$tagname"; then
		git_do tag -a "$tagname" "$BRANCH" || \
		die "Tagging failed. Please run finish again to retry."
    else
		die "Tag name: $tagname has exists. Please check."
	fi

	git_do push "$ORIGIN" $tagname || \
		  die "Could not push tags to $ORIGIN."

	# create remote branch
	git_do push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH"
	git_do fetch -q "$ORIGIN"

	# configure remote tracking
	git config "branch.$BRANCH.remote" "$ORIGIN"
	git config "branch.$BRANCH.merge" "refs/heads/$BRANCH"
	git_do checkout "$BRANCH"

	echo
	echo "Summary of actions:"
	echo "- A new remote branch '$BRANCH' was created"
	echo "- The local branch '$BRANCH' was configured to track the remote branch"
	echo "- You are now on branch '$BRANCH'"
	echo
}

use_current_branch_name() {
    local current_branch=$(git_current_branch)
    if startswith "$current_branch" "$PREFIX"; then
        BRANCH=$current_branch
        VERSION=${BRANCH#$PREFIX}
    else
        warn "The current HEAD is no $PREFIX branch."
        warn "Please specify a <name> argument."
        exit 1
    fi
}

name_or_current() {
	if [ -z "$VERSION" ]; then
		use_current_branch_name
	fi
}

cmd_push() {

    name_or_current || die

    REMOTE_VERSION=${1:-$VERSION}
    REMOTE_BRANCH=$PREFIX$REMOTE_VERSION

	require_version_arg

	# sanity checks
	require_branch "$BRANCH"
    require_remote_branch "$ORIGIN/$REMOTE_BRANCH"

	require_clean_working_tree
	
	git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" || \
        die "Could not fetch $MASTER_BRANCH from $ORIGIN."

	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi

	# try to merge master into current branch
	# in case a previous attempt to finish this release branch has failed,
	# but the merge into master was successful, we skip it now
    if ! git_is_branch_merged_into "$MASTER_BRANCH" "$BRANCH"; then
        git_do merge --no-ff "$MASTER_BRANCH" || \
            die "There were merge conflicts."
    fi

    #try to pull remote changes 
	git_do pull -q "$ORIGIN" "$REMOTE_BRANCH" || die "Failed to pull from remote '$REMOTE_BRANCH'."
    git_do push "$ORIGIN" "$BRANCH":"refs/for/$REMOTE_BRANCH" 

    if [ $? -ne 0 ]; then
       die "git push codeReview failed, Please check it." 
    fi

	echo
	echo "Summary of actions:"
	echo "- Latest objects have been fetched from '$ORIGIN'"
	echo "- '$MASTER_BRANCH' has been merged into Release branch '$BRANCH' "
	echo "- '$BRANCH' have been pushed to '$ORIGIN $REMOTE_BRANCH'"
	echo
}

cmd_track() {
	parse_args "$@"
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$BRANCH"
	git_do fetch -q "$ORIGIN"
	require_branch "$ORIGIN/$BRANCH"

	# create tracking branch
	git_do checkout -b "$BRANCH" "$ORIGIN/$BRANCH"

	echo
	echo "Summary of actions:"
	echo "- A new remote tracking branch '$BRANCH' was created"
	echo "- You are now on branch '$BRANCH'"
	echo
}

cmd_finish() {
	DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
	DEFINE_string message "" "use the given tag message" m
	DEFINE_boolean push false "push to $ORIGIN after performing finish" p
	parse_args "$@"
	require_version_arg


	# sanity checks
	require_branch "$BRANCH"
	require_clean_working_tree

	git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" || \
        die "Could not fetch $MASTER_BRANCH from $ORIGIN."

	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi
	if has "$ORIGIN/$BRANCH" $(git_remote_branches); then
		require_branches_equal "$BRANCH" "$ORIGIN/$BRANCH"
	fi

	# try to merge into master
	# in case a previous attempt to finish this release branch has failed,
	# but the merge into master was successful, we skip it now
	if ! git_is_branch_merged_into "$BRANCH" "$MASTER_BRANCH"; then
		git_do checkout "$MASTER_BRANCH" || \
		  die "Could not check out $MASTER_BRANCH."
		git_do merge --no-ff "$BRANCH" || \
		  die "There were merge conflicts."
		  # TODO: What do we do now?
	fi

	# try to tag the release
	# in case a previous attempt to finish this release branch has failed,
	# but the tag was set successful, we skip it now
	local tagname=$VERSION_PREFIX$VERSION
	if ! git_tag_exists "$tagname"; then
		local opts="-a"
		[ "$FLAGS_message" != "" ] && opts="$opts -m '$FLAGS_message'"
		eval git_do tag $opts "$PREFIX$VERSION" "$BRANCH" || \
		die "Tagging failed. Please run finish again to retry."
	fi

    #push code
	git_do push "$ORIGIN" "$MASTER_BRANCH" || \
		die "Could not push to $MASTER_BRANCH from $ORIGIN."
	git_do push --tags "$ORIGIN" || \
		die "Could not push tags to $ORIGIN."

	echo
	echo "Summary of actions:"
	echo "- Latest objects have been fetched from '$ORIGIN'"
	echo "- Hotfix branch has been merged into '$MASTER_BRANCH'"
	echo "- The hotfix was tagged '$VERSION_PREFIX$VERSION'"
	echo "- Hotfix branch '$BRANCH' is still available"
	echo "- '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
	echo
}
